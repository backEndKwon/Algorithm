/* 
7.8
오셀로
게임 구조?
게임보드 = 8*8 이라고 가정
각 격자는 빈칸, 흑, 백 중 하나의 "상태"를 가짐
보드는 2차원 배열로 표현

게임 동작 설계
게임 시작과 종료로 구분
시작시?
게임 보드 초기화
플레이어는 번갈아가며 돌을 놓는다
해당위치에 돌을 놓을 수 있는지 확인
놓을 수 없다면, 다시 놓을 수 있는지 확인
놓을 수 있다면, 해당 위치에 돌을 놓고, 상대방 돌을 뒤집는다
게임보드 업데이트
만약 더이상 놓을 수 있는 곳이 없다면, 상대방이 놓을 수 있는지 확인
놓을 수 없다면, 게임 종료
게임 종료시?
보드를 세어서 돌이 많은 플레이어가 승리
*/

class Othello {
  //게임의 초기상태를 설정
  constructor() {
    this.board = [
      ["-", "-", "-", "-", "-", "-", "-", "-"],
      ["-", "-", "-", "-", "-", "-", "-", "-"],
      ["-", "-", "-", "-", "-", "-", "-", "-"],
      ["-", "-", "-", "○", "●", "-", "-", "-"],
      ["-", "-", "-", "●", "○", "-", "-", "-"],
      ["-", "-", "-", "-", "-", "-", "-", "-"],
      ["-", "-", "-", "-", "-", "-", "-", "-"],
      ["-", "-", "-", "-", "-", "-", "-", "-"],
    ];
    this.currentPlayer = "●";
  }

  //해당위치에 돌을 놓을 수 있는지 확인
  isValidMove(x, y) {
    //해당위치에 돌을 놓을 수 있는지 확인하는 로직
  }

  // 돌을 놓고, 상대방 돌을 뒤집기
  makeMove(x, y) {
    //isValidMove가 true일때만 실행
    if (this.isValidMove(x, y)) {
      //돌을 놓고 뒤집는 로직
    } else {
      console.log("돌을 놓을 수 없습니다. 위치를 다시 선택하세요.");
      // 다른 위치를 선택하도록 유도하는 로직
    }
  }

  //게임오버
  isGameOver() {
    //게임이 종료되었는지 확인하는 로직
  }

  getWinner() {
    //승자를 확인하는 로직
  }
}

const game = new Othello();

//돌 놓을 위치
const row = 3;
const column = 2;

game.makeMove(row, column);

if (game.isGameOver()) {
  const winner = game.getWinner();
  console.log("게임 종료");
  console.log("승자는", winner, "입니다");
}
